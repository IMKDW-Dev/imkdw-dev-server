generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id              String @id
  email           String @unique @db.VarChar(255)
  nickname        String @unique @db.VarChar(30)
  profile         String
  oAuthProviderId Int?   @map("oauth_provider_id")
  roleId          Int    @map("role_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  articleComments articleComment[]
  articles        articles[]
  oAuthProvider   userOAuthProviders? @relation(fields: [oAuthProviderId], references: [id])
  role            userRoles           @relation(fields: [roleId], references: [id])

  @@index([email, nickname])
  @@map("Users")
}

model userRoles {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")
  users      users[]

  @@index([name])
  @@map("UserRoles")
}

model userOAuthProviders {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  users users[]

  @@index([name])
  @@map("oAuthProviders")
}

model articles {
  id           String  @id @db.VarChar(255)
  title        String  @db.VarChar(255)
  categoryId   Int     @map("category_id")
  content      String  @db.Text
  visible      Boolean @default(true)
  thumbnail    String  @default("https://static.imkdw.dev/images/article-thumbnail.png") @db.VarChar(255)
  viewCount    Int     @default(0) @map("view_cnt")
  commentCount Int     @default(0) @map("comment_cnt")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  articleTag     articleTag[]
  articleComment articleComment[]
  category       category         @relation(fields: [categoryId], references: [id])
  users          users?           @relation(fields: [usersId], references: [id])
  usersId        String?

  @@map("Articles")
}

model articleViewTrend {
  id        Int @id @default(autoincrement())
  viewCount Int

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  @@map("ArticleViewTrend")
}

model tags {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  articleTag articleTag[]

  @@map("Tags")
}

model articleTag {
  articleId String @map("article_id") @db.VarChar(255)
  tagId     Int    @map("tag_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  articles articles @relation(fields: [articleId], references: [id])
  tags     tags     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("ArticleTags")
}

model category {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.Char(20)
  image String? @db.VarChar(255)
  desc  String  @db.VarChar(255)
  sort  Int

  createAt   DateTime   @default(now()) @map("create_at")
  createUser String     @default("_system") @map("create_user")
  updateAt   DateTime   @updatedAt @map("update_at")
  updateUser String     @default("_system") @map("update_user")
  deleteAt   DateTime?  @map("delete_at")
  deleteUser String?    @map("delete_user")
  articles   articles[]

  @@map("Categories")
}

model articleComment {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id") @db.VarChar(255)
  userId    String @map("user_id")
  content   String @db.Text

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article articles @relation(fields: [articleId], references: [id])
  user    users    @relation(fields: [userId], references: [id])

  @@map("ArticleComments")
}
